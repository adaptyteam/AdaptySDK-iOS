//
//  FallbackTests.swift
//  AdaptyTests
//
//  Created by Aleksei Valiano on 21.05.2025.
//

#if canImport(Testing)

@testable import Adapty
import Foundation
import Testing

struct FallbackTests {
    enum Json: String {
        case medium = "fallback.json"
        case large = "fallback_large.json"
        var url: URL {
            Bundle.module.url(forResource: rawValue, withExtension: nil)!
        }
    }

    @Test func testPaywalls() throws {
        try test(type: AdaptyPaywall.self, json: Json.medium, placementIds: [
            "access.or.subscribe",
            "accesss",
            "all-onboarding",
            "anna-stage-ui-pm-a",
            "davyd_test_cdn",
            "example_ab_test",
            "fallbac-test-dbastrikin",
            "fonts_migration",
            "meets.or.access",
            "meets.subscrubes",
            "mopnthly-onboarding",
            "new_placement",
            "oboarding.access",
            "onboarding",
            "onboarding-multiply",
            "onboarding-workout",
            "promo",
            "settings",
            "test_alexey",
            "test_egor_placement_1",
            "test_egor_placement_2",
            "weekly-onboarding",
            "yealy-onboarding",
        ])
    }

    @Test func testOnboardings() throws {
        try test(type: AdaptyOnboarding.self, json: Json.medium, placementIds: [
            "TestLera",
            "TestLera2",
            "evg",
            "evg2",
            "evg3",
            "mirazim-test",
        ])
    }

    private func test<Content: AdaptyPlacementContent>(type: Content.Type, json: Json, placementIds: [String]) throws {
        let fallback = try FallbackPlacements(fileURL: json.url)

        for placementId in placementIds {
            let startTime = CFAbsoluteTimeGetCurrent()
            let content: AdaptyPlacementChosen<Content>? = fallback.getPlacement(byPlacementId: placementId, withVariationId: nil, profileId: "test_profile")
            let timeElapsed = CFAbsoluteTimeGetCurrent() - startTime

            #expect(content != nil)

            print("### Time elapsed for placement[\(placementId)]: \(String(format: "%.6f", timeElapsed)) s.")
        }
    }

    @Test func testLargeFile() throws {
        try test(type: AdaptyPaywall.self, json: Json.large, placementIds: [
            "pal948",
            "placement_test_1",
            "VGP231215",
            "onboarding_new",
            "rt.cross2",
            "crosA1",
            "test123",
            "aaaa123",
            "2078_front",
            "webpayment",
            "kovalev_ab_10000",
            "test1234",
            "sm_test_placement",
            "TestCross2",
            "test-priority-0",
            "settings_new",
            "test2046_2",
            "test1232",
            "testplc33",
            "rt.paywall1",
            "aridplc",
            "ar_test_pl1",
            "var",
            "muratov_test",
            "rt.tags",
            "example_ab_test",
            "KOVALEV_ABMODAL_DONT_TOUCH",
            "rt.off.ios",
            "231",
            "kovalev_old_test1",
            "test-select-winner-2",
//            "Test2",
//            "onboarding3",
            "cross.wo.pb",
            "ar2078",
            "rwerwe",
            "rt.3pr.2loc",
//            "onbrd_ui",
            "vp-test-pl",
//            "Alina test",
            "2078_noid",
            "TestButton",
            "broken",
            "winback_placement",
//            "onb_dan",
//            "aniko_locale",
            "ar1932plcdev",
            "annatest3123",
            "Testlers",
            "test12356",
            "arlocpl",
            "2078darkOFF",
            "kovalev_p_regab",
            "3223",
            "pl953",
            "plcnodelete",
            "test_alexey",
            "vp-1686-11t",
            "TestAd",
            "cross2",
            "kovalev_fix_bag",
//            "first_onboarding_placement_by_kovalev",
            "34567",
            "test-change-placement",
//            "aniko_blue",
//            "dan_onb_2",
//            "kovalev_3",
            "arplc02",
            "2078new",
//            "TestLera",
            "TestForSDK",
            "fotorama_placement_2",
//            "213",
            "annatest123",
            "artgplc5",
            "test_egor_1962",
            "test_sergei_python312",
            "Test1212",
            "asd",
            "KOVALEV_ADP_2739",
            "kovalev_222",
            "aniko_first",
            "arplc123",
            "kovalev_p_test1",
            "newplc111",
            "4565465465465",
            "rich",
            "regressplc1",
            "rt.cross1",
            "rt.off.andr",
            "test-priority",
            "arplc2254",
            "VGP2402091",
            "newplc123",
            "Placement530",
            "evg1",
//            "aniko_red",
            "artgplc3",
            "crosA2",
            "cross1",
            "onboaring_not",
            "1803",
            "antons_test_placement",
            "slider",
//            "Testab",
            "testplc3422",
            "kovalev_test_1",
//            "Testl",
            "1",
            "arplc2_2",
            "3",
            "arplc111",
            "rt.wo.pb",
            "test14423",
            "20788_2",
//            "onboarding-7",
//            "Test3333",
            "test123ar",
            "arpwab1",
            "cache_test",
            "test1ab",
            "test.web.url",
            "вапвап",
//            "evg",
            "base64",
            "test13232",
            "kovalev_p1",
            "asascass",
            "pl1920",
            "rt.ab",
            "solodskikh_test",
            "artgplc",
            "test1112",
            "vp.def",
            "test-priority-1",
            "annaplc02",
            "arplc2140",
            "new_pp",
            "15501",
            "PlacementTest0",
            "test_egor_2653",
            "egor_test_m",
            "test-test-test-test",
            "3333123",
            "2078_onlyAR",
            "placementA1",
            "Placement1103",
            "sfsdsdfgsdfg",
            "vp-1612",
            "test_evgeniy",
            "PriorTest22",
            "2078id",
//            "abtest",
            "Fallback_Test",
            "another_f_test",
            "artest111222",
            "Checkdublicate ",
            "test_anna",
            "123321",
//            "test_egor_6",
            "2078darkON",
            "vp-off",
            "jakdsjkajskd",
            "kovalev_KMS",
            "2078_off2",
//            "onboarding4",
            "TestCross1",
            "rt.2pr.consum",
            "arar",
            "arcarpc",
            "conflict3",
            "PriorTest33",
            "luda",
            "conflict1",
            "vp-test-pl2",
            "wefw",
            "PlacementsTest2",
            "testу3plc322",
            "test-select-winner",
            "width_bug",
            "onboarding",
            "list",
            "11122",
            "placement2a",
            "dmelnichuk",
            "conflict2",
            "2078noid222",
            "sss123",
            "annatest1234",
            "2078foff2",
            "TestPrior",
            "13233123123123",
//            "test",
            "rt.legacy",
            "test-placement-priority",
            "arplc2030",
            "kovalev_p2",
            "arplc22541",
            "test_kovalev_2",
            "TestAnim",
            "PlacementsTest",
            "base641",
            "arplc2254_2",
            "pl955",
            "placement1",
            "sdfsdfsdfsdf",
            "TestPlacement",
            "2078off",
//            "inactive",
            "arcrosplc1",
            "TestLera44",
            "Testpl3",
            "plc2",
            "test_anna2",
            "arplc1",
            "2078plc2",
            "arolc14",
            "221",
            "dbastrikin.onboardings.test.0",
            "plcdelete",
            "ne0wp3lc132",
            "egor_test",
            "TestPrio3",
            "askbcasbhjacbhca983",
            "asdasd",
            "7c568415-e110-4301-819a-491bbcd39976",
            "vp-1874",
            "Testpl1",
            "scsacacasc",
//            "TestPri2",
            "kovalev_placement_paywall",
            "sfsdsdfgsdfg2",
            "another_f_test3",
//            "reer",
            "kovalev_old_test2",
            "TestPosition",
//            "4334343",
            "test_egor_1707",
            "arvideo3",
            "TestButton3",
            "onboarding_kovalev",
            "20788",
            "ar2030pl",
            "test_eugene",
            "kovalev_h_stack",
            "534",
            "modal_placement",
            "1550",
            "hide",
//            "Test test ",
            "kovalev_test_100",
            "376453674572",
//            "lol-kek",
            "CAHS_TEST",
            "test-priority-2",
            "Test32Test32",
            "test-priority-4",
            "test2646",
//            "test_egor_1",
            "placement_test_2",
//            "aniko_doll",
            "2078on",
            "2078_front2",
            "1233",
            "yoga",
            "PL1000",
            "mchebotarev_placement_1",
            "vp-bugs",
            "TestPaywall22",
            "dmelnichuk2",
            "vp-041224",
            "test_davyd",
            "test_kovalev",
//            "onb_Pla2",
            "artgplc4",
//            "onboarding6",
            "TestProd1",
            "rt.segm.user1",
            "asasas",
//            "aniko_evening",
//            "sm-onboarding-placement",
            "paywallpaywallffd",
            "kovalev",
//            "another_f_test2",
//            "PlacementTestAB",
            "mountain",
            "test-priority-3",
//            "dbastrikin-onboarding-analytics-test",
            "PAYWALL_BUILDER_V2_TEST",
//            "onboarding-mobile",
            "TestButton2",
            "ar1982",
//            "test-default-audience",
            "3443555",
//            "aniko_onbrd",
            "TestPrior2",
            "anna_placement",
            "42334",
            "artgplc2",
            "TestLera333",
            "123",
            "placekcsdkcr32032",
            "test_egor_001",
            "video",
//            "aniko_gender",
            "evg2",
            "KOVALEV_PAYWALLMODAL_DONT_TOUCH",
            "123123123",
            "gleb1",
            "vlad",
            "12311",
//            "onbo",
            "test_1970_1",
//            "kovalev_2",
            "fotorama_placement_1",
            "ab1",
            "2078nomedia",
            "arplc25",
            "kovalev_new_1",
            "modal_placement2",
        ])
    }
}
#endif
